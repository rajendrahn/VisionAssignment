function test()

f = @(x, T) tran(x,T);

% maketform arguments
ndims_in = 2;
ndims_out = 2;
forward_mapping = [];
inverse_mapping = f;
Hmodel = [];
load('Hmodel.mat');
tform = maketform('custom', ndims_in, ndims_out, ...
    forward_mapping, inverse_mapping, Hmodel);

body = imread('goi1_downsampled.jpg');
body2 = reverseWarp(body, Hmodel);

H = homography(body,body2);
H = H/H(3,3);
tform = maketform('custom', ndims_in, ndims_out, ...
    forward_mapping, inverse_mapping, H);


body3 = reverseWarp(body, H);

body4 = imread('goi2_downsampled.jpg');

H = homography(body,body4);
H = H/H(3,3); 
tform = maketform('custom', ndims_in, ndims_out, ...
    forward_mapping, inverse_mapping, H);
body5 = reverseWarp(body, H);

subplot(1,5,1)
imshow(body)
subplot(1,5,2)
imshow(body2)

subplot(1,5,3)
imshow(body3)

subplot(1,5,4)
imshow(body4)

subplot(1,5,5)
imshow(body5)
end


% inverse mapping function
function warpedImage = reverseWarp(originalImage, transform)
inverseTransform = eye(3,3);% inv(transform); %taking inverse once hence not using A/b
imageSize = size(originalImage);
warpedImage = zeros(imageSize);
for x = 1 : size(warpedImage,1)
    for y = 1 : size(warpedImage,2)
        location = inverseTransform*[x;y;1];
        location = round(location);%Nearest Neighbour
        location(1) = location(1) / location(3);
        location(2) = location(2) / location(3);
        if location(1) > 0 && location(2) > 0 && location(1) <= imageSize(1) && location(2) <= imageSize(2)
            warpedImage(x,y) = originalImage(location(1),location(2))/;
        end
    end
end
disp(size(warpedImage))
end

function y = tran(x, T)
if size(x,1) == 1  
x=x';
x=[x;1];
y=T.tdata*x;
y = y/y(3,1);
y(3,:) = [];
y = y';
else
    y = x;
end
end